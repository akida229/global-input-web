import React from 'react';
import {Link} from 'react-router-dom'

import {styles,images} from './styles';
import TopHeaderSection from "../../top-header-section";
import AutoPlayVideo from "../../components/auto-play-video";
import {exampleLinks} from '../examples';
import {styleMatchingScreenSize} from "../../utils/screenMedia";
const textContent={
    title:"Global Input App",
    videos:{
        shortNoVoice:"https://media.iterativesolution.co.uk/video/short-part-intro.mp4",
        full:"https://www.youtube.com/watch?v=HzeTY1TA4V8"
    },
    subtitle:"A Unified & Simple Solution for",
    items:["Mobile Input & Mobile Control",
                 "Second Screen Experience",
                 "Mobile Authentication",
                 "Data Encryption"],
    clientdevice:{
        title:"Client Side Only Solution",
        content:{
                  first:["Global Input App provides applications with a client-side-only solution that does not require any extra server-side implementation, no extra API to implement or call, not extra cloud storage, not extra subscriptions, and all business logics are implemented on the client side by including a extension library, passing JSON data and receiving even calls when the user press the button on the mobile.",
                 "For example, if you would like to to display a button button on user's mobile after user scans the encrypted QR code presented by your application, and you would like to call a playMovie() function when the user presses the button, you just need to provide the following:"],
                 inputexample:"And if you would like the user to enter content via his/her mobile and sent to your Smart TV app, you just need to provide the following:",
               },
       otherExamples:{
                  content:"If you are interested, you can have a look at the examples in action, and check out their sources codes on the github:"
               }

    },
    deviceToDevice:{
        title:"Device-to-Device Communication",
        content:{
              first:["Global Input App provides applications with a device-to-device communication secured with end-to-end encryption supported by a Encrypted QR Code.",
              "The QR Code contains a one-time-use encryption key for initiating the the end-to-end encrypted communiction. The Global Input App scans the QR code to obtain the encryption key, which is generated by the application on-the-fly. This means that they key is captured via camera instead of transferring electronically. Hence, even if the HTTPS communication is compromised by using a compromised CA (Certificate Authority) and an active MitM (man-in-the-middle) attack, the communication will be still secure.",
              "The QR code also contains channel information for reaching the application. For example, the URL to a WebSocket proxy server, which is responsible for routing the encrypted messages to the target. You can run your own open-source WebSocket server or use our instances for free.",
              "This mechanism allows you to implement the integration logic across multiple device applications within the client device application without adding any extra server-side business logic, and the communication is secured with device-to-device encryption, initiated by scanning an encrypted QR code."]
        }

    },
    encryptedStorage:{
        title:"Portable Encrypted Storage",
        first:["Global Input App provides applications with encrypted storage on user mobiles. The data are encrypted with encryption keys that are in turn encrypted with a master encryption key generated from the user app password. In this encryption keys hiearchy, sits on the top is the app user password, which is not stored anywhere. Hence, on the start of each session, the user has to provide the password, which is used for encrypting/decrypting the encryption keys. The encryption keys, in turn, are used for encrypting/decrypting the data stored in the encrypted storage.",
        "This means that even if somebody has physically got hold of the device, and bypassed the device security such as biometric authentication or device password authentication somehome, the data is still secure.",
        "Also data will always stay encrypted until to the point of actual use and the decrypted data will be discarded immediately after the use, minimising the reliance on the system security.",
        "Confidential data such as user crendentials, personal information, user preferences for personalized experiences etc. can be stored in the mobile storage securely. The connected application can send data to the user for storing for later use. When this happens, the user will be presented with an option of saving the data into the storage. Later when the application requires the data, he/she can select and inspect the selected data content and push it to the application on demand."]

    }

}

export default class LearnMoreScreen extends React.Component{
  static pagePath="/global-input-app/learn-more"
  static menu={
        link:"/global-input-app/learn-more",
        linkText:"Learn More",
        styles:{
                menuItem:{
                  get:styleMatchingScreenSize,
                  default:{
                    float: "left",
                    display: "block",
                    textAlign: "center",
                    textDecoration: "none",
                    fontSize: 15,
                    borderRadius:25,
                    color: "#4281BD",
                    backgroundColor:"white",
                    whiteSpace:"nowrap",
                    fontWeight:300,
                    padding:10,
                    maxHeight:40,
                    marginLeft:20
                  },

                  selected:{
                      color:"#002080",
                      fontWeight:500
                  },
                  hover:{
                      color:"#66ccff",
                      fontWeight:300
                  }

                }
          }
   }
  constructor(props){
    super(props);
    this.onWindowResize=this.onWindowResize.bind(this);
  }
   componentDidMount() {
       window.addEventListener("resize", this.onWindowResize);

   }


   componentWillUnmount() {
       window.removeEventListener("resize", this.onWindowResize);
   }
   onWindowResize(){
      this.forceUpdate();
   }
   renderVideo(){
     return(<AutoPlayVideo video={textContent.videos.shortNoVoice} muted={true}/>);
     //return null;
   }
  render(){
      return(
        <div style={styles.content}>
            <TopHeaderSection/>
            <a href={textContent.videos.full} target="_blank">
            <div style={styles.tv.container.get()}>
                  <div styles={styles.tv.inner}>
                      <img src={images.computer} style={styles.tv.img}/>
                    <div style={styles.tv.screen}>
                      {this.renderVideo()}
                    </div>
                  </div>
            </div>
            </a>
            <div style={styles.textContent}>
              <div style={styles.title.get()}>{textContent.title}</div>
              <div style={styles.subtitle.get()}>{textContent.subtitle}</div>
              <div style={styles.description.get()}>
                  <ul>
                      {textContent.items.map(this.renderItems.bind(this))}
                  </ul>


              </div>
            </div>
            <div style={styles.cardContainer.get()}>
                {this.renderClienSideOnly()}
                {this.renderDeviceToDevice()}
                {this.renderEncryptedStorage()}

          </div>
        </div>
      )

  }
  renderItems(content, index){
      return(<li key={index} className="titleList">{content}</li>);
  }

  renderParagraph(content,index){
      return(<div style={styles.card.paragraph} key={index}>
              {content}
        </div>
      );
  }
  renderClienSideOnly(){
    return(

          <div style={styles.card.get()}>
              <div style={styles.card.title}>
                  {textContent.clientdevice.title}
              </div>
              <div style={styles.card.content}>
                  {textContent.clientdevice.content.first.map(this.renderParagraph.bind(this))}
              </div>
                  <pre style={styles.code}>
                      {`
type:  "button",
label: "Play",
onInput:value => playMovie()
                      `}
                  </pre>
                  <div style={styles.card.content}>
                      {textContent.clientdevice.content.inputexample}
                  </div>
                  <pre style={styles.code}>
                      {`
type:  "text",
label: "Search",
onInput:value => searchContent(value)
                      `}
                  </pre>
                  <div styles={styles.card.paragraph}>{textContent.clientdevice.otherExamples.content}</div>


                  <div styles={styles.card.exampleContainer}>
                    {exampleLinks.map(this.listExample.bind(this))}
                  </div>


          </div>

    );
  }
  listExample(example, index){

      return(
          <Link to={example.link} key={index} style={styles.examplelink.get()}>{example.linkText}</Link>
      );

  }

  renderDeviceToDevice(){
    return(

          <div style={styles.card.get()}>
              <div style={styles.card.title}>
                  {textContent.deviceToDevice.title}
              </div>
              <div style={styles.card.content}>
                  {textContent.deviceToDevice.content.first.map(this.renderParagraph.bind(this))}
              </div>
          </div>

    );
  }

  renderEncryptedStorage(){
    return(

          <div style={styles.card.get()}>
              <div style={styles.card.title}>
                  {textContent.encryptedStorage.title}
              </div>
              <div style={styles.card.content}>
                  {textContent.encryptedStorage.first.map(this.renderParagraph.bind(this))}
              </div>
          </div>

    );
  }



}
