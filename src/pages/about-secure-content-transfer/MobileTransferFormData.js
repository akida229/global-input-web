import React from 'react';
import {Link} from 'react-router-dom';
import {styles,images} from './styles';
import examples from '../examples';

export default class MobileTransferFormData extends React.Component{

  render(){
    const theme=this.props.theme;
    return(
         <React.Fragment>
          <theme.Title>Form Data Sharing and Editing Across Multiple Devices</theme.Title>

                <div style={styles.chapter.paragraph}>
                    Transfering content between user mobile and applications securely and allowing user to save and load the data on-demand is an attractive option when it comes to personal data or other sensitive information.
                </div>
                <div style={styles.chapter.paragraph}>


                    The communication between mobile app and the application is secured with the end-to-end encryption, and it is initiated by scanning an encrypted QR code. The QR Code contains a one-time-use encryption key for initiating the the end-to-end encrypted communication. The Global Input App scans the QR code to obtain the encryption key, which is generated by the application on-the-fly. This means that they key is captured via camera instead of transferring electronically. Hence, even if the HTTPS communication is compromised by using a compromised CA (Certificate Authority) and an active MitM (man-in-the-middle) attack, the communication will be still secure.
                </div>

                <div style={styles.chapter.paragraph}>
                    The communication between mobile app and the application is secured with the end-to-end encryption, and it is initiated by scanning an encrypted QR code. The QR Code contains a one-time-use encryption key for initiating the the end-to-end encrypted communication. The Global Input App scans the QR code to obtain the encryption key, which is generated by the application on-the-fly. This means that they key is captured via camera instead of transferring electronically. Hence, even if the HTTPS communication is compromised by using a compromised CA (Certificate Authority) and an active MitM (man-in-the-middle) attack, the communication will be still secure.
                </div>
                <div style={styles.chapter.paragraph}>
                    Global Input App users can be presented with an option of saving data into the mobile app for later use. For this to happen, all the application needs to do is to set the id of the form data being transferred to the mobile app. The user can inspect the details of the data and press the 'save' button on his/her mobile to save the form data. All the fields in the form that has the id will become part of the data that are saved into the form.
                </div>

                <div style={styles.chapter.paragraph}>
                    The data stored in the mobile app are encrypted with encryption keys that are in turn encrypted with a master encryption key generated from the user app password. In this encryption keys hierarchy, sits on the top is the app user password, which is not stored anywhere. Hence, on the start of each session, the user has to provide the password, which is used for encrypting/decrypting the encryption keys. The encryption keys, in turn, are used for encrypting/decrypting the data stored in the encrypted storage.
This means that even if somebody has physically got hold of the device, and bypassed the device security such as biometric authentication or device password authentication somehow, the data is still secure.
Also data will always stay encrypted until to the point of actual use and the decrypted data will be discarded immediately after the use, minimizing the reliance on the system security.
Confidential data such as user credentials, personal information, user preferences for personalized experiences etc. can be stored in the mobile storage securely. The connected application can send data to the user for storing for later use. When this happens, the user will be presented with an option of saving the data into the storage. Later when the application requires the data, he/she can select and inspect the selected data content and push it to the application on demand.
                </div>
                <div style={styles.chapter.paragraph}>
                    The following code is an exampe of a form that can transfer data via mobile app:
                </div>
          {this.renderExampleCode1()}


                  <div style={styles.chapter.paragraph}>
                  <b>
                If you are interested, you can have a look at the following transfer form data example, and check out its sources code on the Github repository:
                  </b>
                  </div>
                  <div style={styles.chapter.paragraph}>
                    <ul>
                      <li style={styles.exampleItem}>
                        <Link to={examples.links.transferFormData}>Transfer Form Data</Link>
                        </li>
                    </ul>
                  </div>




      </React.Fragment>
    );
  }
  renderExampleLink(linkitem){

  }
  renderExampleCode1(){

      return(
        <div style={styles.code.get()}>
        <pre>
{`
  form:{
      title:"My Details",
      id:"my detais",
      fields:[{
          label: "First Name",
          id:"first_name",
          onInput:firstName =>this.setFirstName(firstName)
      },{
          label: "Last Name",
          id:"first_name",
          onInput:firstName =>this.setFirstName(firstName)
      },{
          label: "Email",
          id:"email",
          onInput:firstName =>this.setEmail(email)
      }]
  }
`}
            </pre>
       </div>
      );
  }

}
