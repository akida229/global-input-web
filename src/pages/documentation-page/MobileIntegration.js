import React from 'react';
import {Link} from 'react-router-dom';
import {styles,images} from './styles';

import BorderedWhite from '../../page-components/themes/bordered-white';

import {examplesLinks,externalsLinks} from '../../links-components';



const {ListAllExamples,ContentTransfer}=examplesLinks;

const {WebSocketServer,WatchIntroduction,ReactJSLink,ReactJSExtension}=externalsLinks;

export default class MobileIntegration extends React.Component{

  static menu={
        id:"clientdevice",
        label:"Mobile Integration"
  }
  render(){
    const {P, Title, Code,Concept, FirstSection,NextSection}=this.props.theme;
    return(
      <React.Fragment>

            <FirstSection>
              <WatchIntroduction>Watch Intro</WatchIntroduction>

                  <Title>Mobile Integration</Title>
                    <P>
  Global Input App (GIA) is a mobile app with extensions, providing applications with
  a universal mobile integration solution.
  It relies on <Concept>Encrypted QR Codes</Concept> to transfer one-time-use encryption keys for
  securing the communications using end-to-end encryption.
</P>
<P>
  Applications do no need extra server-side business services or develop separate mobile apps to
  implement the mobile integration.
  They simply need to specify mobile user interfaces and receive and process mobile events within
  the existing application context.
</P>

<P>
For example, let's that you have written an <ReactJSLink {...this.props}>React</ReactJSLink> application
that is running on computers, Smart TVs, IoT devices, or on self-service machines, and

you would like to display a text field, labelled as <Concept>Content</Concept>, on the user's mobile screen after the user has connected to your application by scanning the encrypted QR code.

And you would like to receive the typed content when the user is typing on his/her mobile.

</P>
<P>
The <ReactJSExtension {...this.props}>GIA extension</ReactJSExtension> allows you to implement the
requirement by including the following:
<Code>
{`
import {GlobalInputConnect} from 'global-input-react';
...
export default props=>{
    const [content, setContent]=useState("");
    let mobileConfig={
      initData:{
          form:{
                  title:"Content Transfer",
                  fields:[{
                      label:"Concent",
                      operations:{onInput:()=>play();}
                  }]
            }
      },
    };
    return(<GlobalInputConnect mobileConfig={mobileConfig}/>);
};
`}
                    </Code>
Try the <ContentTransfer {...this.props}>demo application</ContentTransfer> to see the above code in action.
The part related to the mobile integration is straightforward to understand.
The <Concept>GlobalInputConnect</Concept> component is responsible for displaying an encrypted QR code that
contains a one-time-use encryption key among other communication channel parameters.
When a user scans the QR Code with his/her Global Input App, it initiates an end-to-end encrypted
communication across devices and use the configuration you have specified to construct the mobile
user interface and your application is able to receive mobile events via callbacks.



  </P>

<P>
The following applications demonstrate a few of the use cases that the GIA mobile integration can provide:
                    </P>
                    <ListAllExamples {...this.props}/>


                    <P>

The mobile operations are always started by a user action scanning an <Concept>Encrypted QR Code</Concept>,
which contains a <Concept>one-time-use encryption key</Concept> for the end-to-end encryption.
The encryption key is generated by the application on-the-fly and available only as part of the QR Code .
                    </P>
            </FirstSection>

    </React.Fragment>
    );
  }


}
